" Vim with all enhancements
set encoding=utf-8
"插件管理 vim-plug
call plug#begin('~/.vim/vimplugged')
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
Plug 'neoclide/coc.nvim', {'branch': 'release'}
" 片段提示补全
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'

"tagbar for go project
Plug 'godlygeek/tabular'

"markdown
Plug 'plasticboy/vim-markdown'

"ctrlp
Plug 'ctrlpvim/ctrlp.vim'
Plug 'puremourning/vimspector'

Plug 'vim-scripts/sessionman.vim'

"自动指定工作目录
Plug ' airblade/vim-rooter' 

Plug 'ryanoasis/vim-devicons'
"如果乱码，安装字体
"mkdir -p ~/.local/share/fonts
"cd ~/.local/share/fonts && curl -fLo "Droid Sans Mono for Powerline Nerd Font Complete.otf" https://
" github.com/ryanoasis/nerd-fonts/raw/master/patched-fonts/DroidSansMono/complete/Droid%20Sans%20Mono%20Nerd%20Font%20Complete.otf
Plug 'easymotion/vim-easymotion'
Plug 'vim-airline/vim-airline'
" 设置NerdTree
Plug 'scrooloose/nerdtree'
Plug 'majutsushi/tagbar'
Plug 'mbbill/undotree'

"for json
Plug 'neoclide/coc-json'

Plug 'vim-scripts/Auto-Pairs'

"Vim主题配色
Plug 'fatih/molokai'
call plug#end()

”vimspector的调试按键方案
let g:vimspector_enable_mappings='HUMAN'

"vim-rooter的项目根目录配置
let g:rooter_patterns = ['.git', 'go.mod', '*.sln', 'build/env.sh','.vimspector.json']

inoremap jk <ESC>
"启用真彩色
set termguicolors
colorscheme molokai " 修改配色
"vim-go By default syntax-highlighting for Functions, Methods and Structs is disabled. To change it:
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_fields = 1
let g:go_highlight_types = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1


let g:tagbar_autopreview = 1
"关闭排序,即按标签本身在文件中的位置排序
let g:tagbar_sort = 0
let g:tagbar_width = 30

noremap <leader>3 :NERDTreeToggle<CR>
noremap <leader>4 :TagbarToggle<CR>
"打开关闭undotree
nnoremap <leader>5 :UndotreeToggle<cr>
nnoremap <leader>6 :call QuickfixToggle()<cr>

let g:quickfix_is_open = 0
"切换quickfix窗口开关
function! QuickfixToggle()
    if g:quickfix_is_open
        cclose
        let g:quickfix_is_open = 0
        execute g:quickfix_return_to_window . "wincmd w"
    else
        let g:quickfix_return_to_window = winnr()
        copen
        let g:quickfix_is_open = 1
    endif
endfunction


"删除非当前buffer以外的所有buffer
fun! DeleteAllBuffersInWindow()
    let s:curWinNr= winnr()
    if winbufnr(s:curWinNr)==1
        ret
    endif
    let s:curBufNr= bufnr("%")
    exe "bn"
    let s:nextBufNr= bufnr("%")
    while s:nextBufNr != s:curBufNr
        exe "bn"
        exe "bdel ".s:nextBufNr
        let s:nextBufNr= bufnr("%")
    endwhile
endfun
map <leader>bda :call DeleteAllBuffersInWindow()<cr>

" 交换文件放到固定目录下
set directory=$HOME/.vimtmp/swap/
let dirname = $HOME . "/.vimtmp/swap/"
if !isdirectory(dirname)
  call mkdir(dirname, "p")
endif
set backupdir=$HOME/.vimtmp/backup/
let backupdirname=$HOME . "/.vimtmp/backup"
if !isdirectory(backupdirname)
    call mkdir(backupdirname)
endif
" 为所有文件设置持久性撤销
set undofile
set undodir=$HOME/.vimtmp/undodir
let undodirname = $HOME . "/.vimtmp/undodir"
if !isdirectory(undodirname)
  call mkdir(undodirname, "p")
endif

" 保存session的选项
"set sessionoptions = blank,buffers,curdir,folds,help,options,tabpages,winsize,terminal
set sessionoptions -=curdir
set sessionoptions +=sesdir
" 关闭缓冲区而不关闭窗口
command! Bd :bp | :sp | :bn | :bd
"折叠方式根据对齐来
set foldmethod=indent

set number
set nocompatible     " 关闭 vi 兼容模式
set nobackup         " 覆盖文件时不备份

set scrolloff=7
set cursorline cursorcolumn
set hlsearch
set incsearch
syntax on                 " 支持语法高亮显示
"filetype plugin indent on " 启用根据文件类型自动缩进
set autoindent            " 开始新行时处理缩进
set expandtab             " 将制表符Tab展开为空格，这对于Python尤其有用
set tabstop=4             " 要计算的空格数
set shiftwidth=4          " 用于自动缩进的空格数
set backspace=2           " 在多数终端上修正退格键Backspace的行为



"关掉错误响铃
set vb t_vb=
"因为报这个错误 ，npm ERR! coc.nvim@0.0.79 build: `tsc -p tsconfig.json`
let g:syntastic_typescript_tsc_fname = ''

"修改gvim字体和大小，默认10号略小
set guifont=Monospace\ 11
"set autochdir     " 自动切换当前目录为当前
set hidden " 有未保存修改切换缓冲由vim负责保存
set smartindent  " 开启新行时使用智能自动缩进

set statusline=\ %<%F[%1*%M%*%n%R%H]%=\ %y\ %0(%{&fileformat}\ %{&encoding}\ %c:%l/%L%)\ g
"Add the following line to your vimrc. This instructs deoplete to use omni completion for Go files.
"call deoplete#custom#option('omni_patterns', { 'go': '[^. *\t]\.\w*' })
"光标到上方窗口,需要<c-w><c-w>k,非常麻烦,现在重映射为<c-k>,切换的方便.
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

"""""""""""""""""""""""for coc.vim """""""""""""""""""""
" TextEdit might fail if hidden is not set.
set hidden

" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" Give more space for displaying messages.
set cmdheight=2

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=200

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Remap <C-f> and <C-b> for scroll float windows/popups.
" Note coc#float#scroll works on neovim >= 0.4.3 or vim >= 8.2.0750
nnoremap <nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
nnoremap <nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
inoremap <nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
inoremap <nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"

" NeoVim-only mapping for visual mode scroll
" Useful on signatureHelp after jump placeholder of snippet expansion
if has('nvim')
  vnoremap <nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#nvim_scroll(1, 1) : "\<C-f>"
  vnoremap <nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#nvim_scroll(0, 1) : "\<C-b>"
endif

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of language server.
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings for CoCList
" Show all diagnostics.
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>
